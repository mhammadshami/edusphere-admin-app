generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  name        String
  email       String       @unique
  password    String
  role        Role         @default(STUDENT)
  sessions    Session[]
  enrollments Enrollment[]
  createdAt   DateTime     @default(now())
  courses     Course[]
  payments    Payment[]
  notifications Notification[]
  activityLogs ActivityLog[]
  files File[]
}

model Session {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  refreshToken String   @db.Text
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())
  expiresAt    DateTime
}

model Course {
  id           String       @id @default(uuid())
  title        String
  description  String
  instructor   User         @relation(fields: [instructorId], references: [id])
  instructorId String
  enrollments  Enrollment[]
  payments     Payment[]
  createdAt    DateTime     @default(now())
}

model Enrollment {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  createdAt DateTime @default(now())
}

model Payment {
  id        String        @id @default(uuid())
  amount    Float
  status    PendingStatus @default(PENDING)
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  course    Course        @relation(fields: [courseId], references: [id])
  courseId  String
  createdAt DateTime      @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  content   String
  user User @relation(fields: [userId], references: [id])
  userId    String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model ActivityLog {
  id String @id @default(uuid())
  action String 
  user User @relation(fields: [userId], references: [id])
  userId String 
  createdAt DateTime @default(now())
}

model File {
  id String @id @default(uuid())
  filename String 
  path String 
  user User @relation(fields: [userId], references: [id])
  userId String
  createdAt DateTime @default(now())
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum PendingStatus {
  PENDING
  CONFIRMED
  FAILED
}
